import java.util.Stack;
import java.util.regex.Pattern;

public class ReversePolishNotation {

	public static String ReversePolishNotation(String str) {

		String[] str_Array = null;
		Pattern pattern = Pattern.compile(" ");
		str_Array = pattern.split(str);
		Stack<String> stack = new Stack<String>();
		int x, y;
		String result = "";
		int get = 0;
		String choice;
		int value = 0;
		String p = "";
		

		for (int i = 0; i < str_Array.length; i++) {
			if (str_Array[i].matches("[0-9]")) {
				stack.push(str_Array[i]);
				continue;
			} else {
				choice = str_Array[i];
			}
			switch (choice) {
			case "+":

				x = Integer.parseInt(stack.pop());
				y = Integer.parseInt(stack.pop());
				value = x + y;
				result = p + value;
				stack.push(result);
				break;

			case "-":
				x = Integer.parseInt(stack.pop());
				y = Integer.parseInt(stack.pop());
				value = x - y;
				result = p + value;
				stack.push(result);
				break;

			case "*":
				x = Integer.parseInt(stack.pop());
				y = Integer.parseInt(stack.pop());
				value = x * y;
				result = p + value;
				stack.push(result);
				break;

			case "/":
				x = Integer.parseInt(stack.pop());
				y = Integer.parseInt(stack.pop());
				value = y / x;
				result = p + value;
				stack.push(result);
				break;

			default:
				continue;
			}
		}

		Integer a = Integer.parseInt(stack.pop());
		return a.toString();
	}

	public static void main(String[] args) {
		ReversePolishNotation test2 = new ReversePolishNotation();

		String s = "4 5 + 2 1 + *";
		String[] a = { "1", "1", "+", "1", "+", "1", "+" };
		System.out.println(ReversePolishNotation(s));
	}
}
