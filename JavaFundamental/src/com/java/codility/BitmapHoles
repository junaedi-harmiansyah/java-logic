import java.util.regex.Pattern;

public class BitmapHoles {
	private static Integer rCek = 0;
	private static Integer rResult = 1;
	private static Integer countRow = 1;
	private static Integer countCol = 1;
	private static Boolean isCek=true;

	public static String BitmapHoles(String[] strArr) {
		Integer row = strArr.length;
		Integer coun = 1;
		Integer result = 0;
		Integer r = 0;
		String[][] arr = new String[row][5];
		for (int i = 0; i < row; i++) {
			cek(strArr, strArr[i], i, arr);
		}
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[i].length; j++) {
				int jj = j;
				if (arr[i][j].matches("[0]")) {
					result = coverHoleLo(arr, i, j, coun, jj);
					

					r = Math.max(r, result);
					coun = 1;
					isCek =true;
				}
			}
		}

		return r.toString();
	}


	public  static Integer coverHoleLo(String[][] arr, int i, int j, Integer coun,
			int jj) {
		
		if ((j + 1) == arr[i].length) {

		} else {
			if (arr[i][j + 1].matches("[0]") && isCek) {
				countRow++;
				int h = j + 1;
				rCek = Math.max(rCek, countRow);
				coverHoleLo(arr, i, h, countRow, jj);

			}

			if (i > 0) {
				if (arr[i - 1][jj].matches("[0]")) {
					countCol++;
					int z = i - 1;
					if (z >= 0) {
						rCek = Math.max(rCek, countCol);
						isCek =false;
						coverHoleLo(arr, z, jj, countCol, jj);
						
					}

				}
			}
		}
		rResult = Math.max(rResult, rCek);
		return rResult;

	}

	private static String[][] cek(String[] strArr, String row, int colm,
			String[][] arr) {
		StringBuilder str = new StringBuilder();
		StringBuilder strRow = new StringBuilder();
		for (int i = 0; i < row.length(); i++) {
			str.append(row.charAt(i) + ",");
			if (i == colm) {
				strRow.append(row.charAt(i) + ",");
			}

		}
		String[] str_Array = null;
		Pattern pattern = Pattern.compile(",");
		str_Array = pattern.split(str);

		for (int j = 0; j < str_Array.length; j++) {
			arr[colm][j] = str_Array[j];
		}

		return arr;

	}

	public static void main(String[] args) {
		String[] a = { "01101", "00001" };
		System.out.print(BitmapHoles(a));
	}
}
